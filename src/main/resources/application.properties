server.port=8080

# --- MySql ---
spring.datasource.url=jdbc:mysql://localhost:3306/webnote_db?createDatabaseIfNotExist=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- H2 ---
#pring.datasource.url=jdbc:h2:~/webnote_db
#spring.datasource.driver-class-name=org.h2.Driver

# --- Authorization ---
spring.datasource.username=root
spring.datasource.password=root

#JPA logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Показывать инструкции
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

# Открытый сеанс в представлении (OSIV)
spring.jpa.open-in-view=false

# Controlling Database Creation Using Hibernate
spring.jpa.hibernate.ddl-auto=create
# Поведение при запуске приложения:
# create - Режим, при котором сначала удаляются существующие таблицы, а затем создаются новые
# update - Сравнивается с существующей схемой, а затем Hibernate обновляет схему в соответствии с различием.
#          Никогда не удаляет существующие таблицы или столбцы, даже если они больше не требуются приложению.
## create-drop - Аналогично созданию, с добавлением, что Hibernate удалит базу данных после завершения всех операций.
#             Обычно используется для модульного тестирования.
# validate  - Hibernate проверяет только наличие таблиц и столбцов; в противном случае он создает исключение
# none      - Это значение эффективно отключает генерацию DDL. Промышленная эксплуатация.

# Включение токена csrf.token, который нужен для идентификации сессии, кто отправляет запрос
#spring.mustache.expose-request-attributes=false
